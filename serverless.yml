service: provisioning

provider:
  name: aws
  runtime: nodejs12.x
  portalUserPool: us-west-2_mugHTapre
  apiUserPool: us-west-2_IcJsd2oSV
  clientId: 4afnq0avnu0u0tirlrbp6eac2v
  usagePlanId: l0mizb
  apiKeyKMSKeyArn: "arn:aws:kms:us-west-2:598931145132:key/d66e0b50-ac3c-42ae-a031-71e2b46fcb3d"
  defaultRegion: us-west-2

functions:

  createApiUser:
    role: keyProvisioner
    handler: handler.createApiUser
    environment:
      clientId: ${self:provider.clientId}
      userPoolId: ${self:provider.apiUserPool}
      usagePlanId: ${self:provider.usagePlanId}
      region: ${self:provider.defaultRegion}

  createAdminUser:
    role: keyProvisioner
    handler: handler.createAdminUser
    environment:
      userPoolId: ${self:provider.portalUserPool}
      region: ${self:provider.defaultRegion}

  postCreateAdminUser:
    role: keyProvisioner
    handler: handler.postCreateAdminUser
    environment:
      userPoolId: ${self:provider.portalUserPool}
      region: ${self:provider.defaultRegion}
    events:
      - cognitoUserPool:
          pool: ${self:provider.portalUserPool}
          trigger: PostConfirmation

  apiCreateApiKey:
    role: keyProvisioner
    handler: api/api-keys.createKey
    environment:
      apiKeyTable: apiKeys
      clientId: ${self:provider.clientId}
      userPoolId: ${self:provider.apiUserPool}
      usagePlanId: ${self:provider.usagePlanId}
      region: ${self:provider.defaultRegion}
      keyArn: ${self:provider.apiKeyKMSKeyArn}
    events:
      - http:
          path: auth/apikey
          method: post
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-west-2:598931145132:userpool/${self:provider.portalUserPool}

  apiGetApiKeyList:
    role: keyProvisioner
    handler: api/api-keys.getKeyList
    environment:
      apiKeyTable: apiKeys
      clientId: ${self:provider.clientId}
      userPoolId: ${self:provider.apiUserPool}
      usagePlanId: ${self:provider.usagePlanId}
      region: ${self:provider.defaultRegion}
      keyArn: ${self:provider.apiKeyKMSKeyArn}
    events:
      - http:
          path: auth/apikey
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-west-2:598931145132:userpool/${self:provider.portalUserPool}

  apiGetApiKey:
    role: keyProvisioner
    handler: api/api-keys.getKey
    environment:
      apiKeyTable: apiKeys
      clientId: ${self:provider.clientId}
      userPoolId: ${self:provider.apiUserPool}
      usagePlanId: ${self:provider.usagePlanId}
      region: ${self:provider.defaultRegion}
      keyArn: ${self:provider.apiKeyKMSKeyArn}
    events:
      - http:
          path: auth/apikey/{id}
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-west-2:598931145132:userpool/${self:provider.portalUserPool}

  apiDeleteApiKey:
    role: keyProvisioner
    handler: api/api-keys.deleteKey
    environment:
      apiKeyTable: apiKeys
      clientId: ${self:provider.clientId}
      userPoolId: ${self:provider.apiUserPool}
      usagePlanId: ${self:provider.usagePlanId}
      region: ${self:provider.defaultRegion}
      keyArn: ${self:provider.apiKeyKMSKeyArn}
    events:
      - http:
          path: auth/apikey/{id}
          method: delete
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-west-2:598931145132:userpool/${self:provider.portalUserPool}

  
  getTenant:
    role: keyProvisioner
    handler: api/get-tenant.get
    events:
      - http:
          path: tenant
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-west-2:598931145132:userpool/${self:provider.portalUserPool}

resources:
  Resources:
    userPoolLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: ${self:service}-${self:provider.stage}-postCreateAdminUser
        SourceArn: arn:aws:cognito-idp:us-west-2:598931145132:userpool/*
    keyProvisioner:
      Type: AWS::IAM::Role
      Properties:
        Path: /api/utils/
        RoleName: KeyProvisioner_${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: keyProvisionerPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Effect: Allow 
                    Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                  - Effect: "Allow"
                    Action:
                      - "s3:PutObject"
                    Resource:
                      Fn::Join:
                        - ""
                        - - "arn:aws:s3:::"
                          - "Ref" : "ServerlessDeploymentBucket"
                  - Effect: Allow
                    Action:
                      - apigateway:POST
                    Resource: "arn:aws:apigateway:us-west-2::/apikeys"
                  - Effect: Allow
                    Action:
                      - apigateway:DELETE
                    Resource: "arn:aws:apigateway:us-west-2::/apikeys/*"
                  - Effect: Allow
                    Action:
                      - apigateway:POST
                    Resource: "arn:aws:apigateway:us-west-2::/usageplans/*/keys"
                  - Effect: Allow
                    Action:
                      - apigateway:POST
                    Resource: "arn:aws:apigateway:us-west-2::/apikeys"
                  - Effect: Allow
                    Action:
                      - apigateway:POST
                    Resource: "arn:aws:apigateway:us-west-2::/usageplans/*/keys"
                  - Effect: Allow
                    Action:
                      - cognito-identity:*
                      - cognito-idp:*
                      - cognito-sync:*
                      - iam:ListRoles
                      - iam:ListOpenIdConnectProviders
                      - iam:ListPlatformApplications
                    Resource: "*"
                  - Effect: Allow
                    Action:
                      - kms:Decrypt
                      - kms:Encrypt
                    Resource: ${self:provider.apiKeyKMSKeyArn}
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                      - dynamodb:Query
                      - dynamodb:PutItem
                      - dynamodb:DeleteItem
                    Resource: "arn:aws:dynamodb:us-west-2:598931145132:table/apiKeys"
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                    Resource: "arn:aws:dynamodb:us-west-2:598931145132:table/tenants"
                  - Effect: Allow
                    Action:
                      - ses:*
                    Resource: "*"


                   